name: CI Build and Test

on:
    push:
        branches: [ "main" ]
    pull_request:
        branches: [ "main" ]

permissions:
    issues: write
    pull-requests: write
    actions: read

jobs:
    build:
        runs-on: ubuntu-latest
        steps:
          - name: Checkout repository
            uses: actions/checkout@v4

          - name: Install build dependencies
            run: sudo apt-get update && sudo apt-get install -y build-essential
        
          - name: Build the project
            id: build_step
            run: |
                set -o pipefail
                make all 2>&1 | tee build.log
                status=${PIPESTATUS[0]}
                grep -i "warning" build.log > warnings.log || true
                {
                    echo "log<<EOF"
                    cat build.log
                    echo "EOF"
                    echo "warnings<<EOF"
                    cat warnings.log
                    echo "EOF"
                } >> "$GITHUB_OUTPUT"

                exit $status

          - name: List build artifacts
            if: steps.build_step.outcome == 'success'
            id: list_artifacts
            run: |
                {
                    echo "artifacts<<EOF"
                    ls -l bin/
                    echo "EOF"
                } >> "$GITHUB_OUTPUT"

        # - name: Run tests
        #   if: steps.build_step.outcome == 'success'
        #   run: make test

          - name: Add comment to PR
            if: github.event_name == 'pull_request' && always()
            uses: actions/github-script@v7
            env:
                BUILD_ARTIFACTS: ${{ steps.list_artifacts.outputs.artifacts }}
                BUILD_LOG: ${{ steps.build_step.outputs.log }}
                BUILD_WARNINGS: ${{ steps.build_step.outputs.warnings }}
            with:
                script: |
                    const status = '${{ steps.build_step.outcome }}';
                    const MAX = 4000;
                    
                    const artifacts = (process.env.BUILD_ARTIFACTS || '').trim();
                    let log = (process.env.BUILD_LOG || '').trim();
                    let warnings = (process.env.BUILD_WARNINGS || '').trim();

                    if (log.length > MAX) log = log.slice(0, MAX) + "\n\n... (log truncated)";
                    if (warnings.length > MAX) warnings = warnings.slice(0, MAX) + "\n\n... (log truncated)";
                    
                    const fence = "~~~"
                    let body;

                    if (status === 'success') {
                        body = [
                        "✅ **Build Succeeded!**",
                        "",
                        "**Build Artifacts:**",
                        fence,
                        artifacts || "(no files found in bin/)",
                        fence
                        ].join("\n");
                    } else {
                        const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
                        body = [
                        "❌ **Build Failed!**", 
                        "",
                        "**Build Log:**",
                        fence,
                        log || "(empty)",
                        fence,
                        `[View full log](${runUrl})`
                        ].join("\n");
                    }
                    if (warnings) {
                        body += "\n\n" + [
                            "⚠️ **Warnings**",
                            fence,
                            warnings,
                            fence
                        ].join("\n");
                    }
                    github.rest.issues.createComment({
                        issue_number: context.issue.number,
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        body: body
                    });
name: CI Build and Test

on:
    push:
        branches: [ "main" ]
    pull_request:
        branches: [ "main" ]

permissions:
    issues: write
    pull-requests: write
    actions: read

jobs:
    build:
        runs-on: ubuntu-latest
        steps:
          - name: Checkout repository
            uses: actions/checkout@v4

          - name: Install build dependencies
            run: sudo apt-get update && sudo apt-get install -y build-essential
        
          - name: Build the project
            id: build_step
            shell: bash
            run: |
                set -o pipefail
                make all 2>&1 | tee build.log
                status=${PIPESTATUS[0]}
                grep -i "warning" build.log > warnings.log || true
                exit $status

          - name: List build artifacts
            if: steps.build_step.outcome == 'success'
            id: list_artifacts
            run: |
                {
                    echo "artifacts<<EOF"
                    ls -l bin/ || echo "(no files found in bin/)"
                    echo "EOF"
                } >> "$GITHUB_OUTPUT"
        
          - name: Extract failure summary
            if: always()
            id: failure_summary
            shell: bash
            run: |
                MAX = 800
                summarize() {
                    local s="$1"
                    local n=${#s}
                    if [ "$n" -gt "$MAX" ]; then
                        printf "%s\n" "${s:0:$MAX}"
                        printf "\n... (summary truncated)"
                    else
                        printf "%s" "$s"
                    fi    
                }
                    if [ -f build.log ]; then
                        first_errors="$(grep -niE '(^|[[:space:]])error:|^FAIL|^ERROR' build.log | head -n 5 || true)"
                        tail_markers="$(grep -niE 'make([[0-9]]+\)?: \*\*\*|collect2:error|ld returned [0-9]+exit status' build.log | tail -n 3 || true)"
                        
                        if [ -n "$first_errors" ] || [ -n "$tail_markers" ]; then
                            summary="Failure indicators:
                                $first_errors
                                $tail_markers"
                        else
                            summary="No explicit error lines found. Tail of build.log:
                                $(tail -n 30 build.log)"
                        fi

                        {
                            echo "summary<<EOF"
                            summarize "$summary"
                            echo
                            echo "EOF"
                        } >> "$GITHUB_OUTPUT"

          - name: Collect Logs
            if: always()
            id: collect_logs
            run: |
                { echo "log<<EOF"; cat build.log 2>/dev/null || true; echo "EOF"; } >> "$GITHUB_OUTPUT"
                { echo "log<<EOF"; cat warnings.log 2>/dev/null || true; echo "EOF"; } >> "$GITHUB_OUTPUT"

        # - name: Run tests
        #   if: steps.build_step.outcome == 'success'
        #   run: make test

          - name: Add comment to PR
            if: github.event_name == 'pull_request' && always()
            uses: actions/github-script@v7
            env:
                BUILD_ARTIFACTS: ${{ steps.list_artifacts.outputs.artifacts }}
                BUILD_LOG: ${{ steps.collect_logs.outputs.log }}
                BUILD_WARNINGS: ${{ steps.collect_logs.outputs.warnings }}
                FAILURE_SUMMARY: ${{ steps.failure_summary.outputs.summary }}
            with:
                script: |
                    const status = '${{ steps.build_step.outcome }}';
                    const MAX = 4000;
                    
                    const artifacts = (process.env.BUILD_ARTIFACTS || '').trim();
                    let log = (process.env.BUILD_LOG || '').trim();
                    let warnings = (process.env.BUILD_WARNINGS || '').trim();
                    const summary = (process.env.FAILURE_SUMMARY || '').trim();

                    if (log.length > MAX) log = log.slice(0, MAX) + "\n\n... (log truncated)";
                    if (warnings.length > MAX) warnings = warnings.slice(0, MAX) + "\n\n... (log truncated)";
                    
                    const fence = "~~~"
                    let body;

                    if (status === 'success') {
                        body = [
                        "✅ **Build Succeeded!**",
                        "",
                        "**Build Artifacts:**",
                        fence,
                        artifacts || "(no files found in bin/)",
                        fence
                        ].join("\n");
                    } else {
                        const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
                        body = [
                        "❌ **Build Failed!**", 
                        "",
                        "**Build Log:**",
                        fence,
                        summary || "(no summary extraced)",
                        fence,
                        "",
                        log || "(empty)",
                        fence,
                        `[View full log](${runUrl})`
                        ].join("\n");
                    }
                    if (warnings) {
                        body += "\n\n" + [
                            "⚠️ **Warnings**",
                            fence,
                            warnings,
                            fence
                        ].join("\n");
                    }
                    github.rest.issues.createComment({
                        issue_number: context.issue.number,
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        body: body
                    });